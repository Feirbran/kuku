Fix Effetti Visivi Persistenti:

Corretto il bug per cui le label "SALTA!" e "KUKU!" rimanevano a schermo, implementando un Timer (notification_timer) per nasconderle automaticamente dopo una durata definita (_show_effect_label, _on_notification_timer_timeout in GameManager.gd).
Risolto errore di connessione duplicata del segnale timeout del timer in _ready.
Introduzione Sistema Classi/Abilità (Base):

Definiti gli script base per le Risorse (.gd) necessarie al sistema:
AbilityBaseData (opzionale, per dati comuni abilità)
ActiveAbilityData (per abilità attive con costo, cooldown, ecc.)
PassiveAbilityData (per abilità passive e trigger)
CharacterClassData (per definire una classe e collegare le sue abilità)
Corretto un errore di parsing in CharacterClassData.gd rinominando la variabile class_name (es. in display_name) per evitare conflitti con la direttiva class_name.
Creazione Dati Esempio (Pampinea):

Creati i file risorsa .tres per le 3 abilità specifiche di Pampinea (pampinea_sguardo_circolare.tres, pampinea_interrogatorio_diretto.tres, pampinea_prima_voce.tres) usando ActiveAbilityData e PassiveAbilityData.
Creato il file risorsa .tres per la classe (pampinea_class.tres) usando CharacterClassData e collegando al suo interno i 3 file .tres delle abilità.
Refactoring Gestione Stato Giocatore:

Creato Player.tscn e Player.gd: Definita una scena generica Player.tscn (con Node3D come root) e creato/collegato lo script Player.gd come "cervello" del giocatore.
Istanziati Player Nodes: Create 10 istanze di Player.tscn nella scena principale (Player0...Player9).
Spostata Responsabilità Stato: Deciso di rendere Player.gd responsabile del proprio stato (vite, sanità, cooldown) invece di GameManager.gd.
Aggiornato Player.gd:
Aggiunte/confermate variabili di stato: fingers_remaining (default 10), is_out, player_id.
Implementata la funzione assign_class(data, id) per ricevere la classe, l'ID e resettare lo stato iniziale (incluse le dita a 10).
Implementata la funzione lose_finger() per decrementare fingers_remaining e gestire l'eliminazione (_handle_elimination).
Aggiunta la funzione get_fingers_remaining().
Aggiunto il segnale fingers_updated(player_id, remaining_fingers).
Aggiornato GameManager.gd:
Aggiunto @export var player_nodes: Array[Node] per i riferimenti ai nodi Player (popolato nell'editor).
Aggiunto @export var test_class_data: CharacterClassData per assegnare una classe di test (popolato nell'editor).
Rimosso il campo "lives" dall'inizializzazione dell'array players_data in _reset_game.
Modificata la funzione lose_life(player_index) per chiamare player_nodes[player_index].lose_finger() invece di modificare players_data.
Aggiunta la funzione handler _on_player_fingers_updated(p_id, p_fingers) per aggiornare le label delle vite quando riceve il segnale da Player.gd.
Aggiunto un blocco alla fine di _reset_game per ciclare sui player_nodes, chiamare assign_class (assegnando ID e classe di test) e connettere il segnale fingers_updated di ogni player all'handler _on_player_fingers_updated del GameManager.
Modificato l'aggiornamento iniziale delle label vite in _reset_game per leggere le vite usando player_node.get_fingers_remaining().